<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue cli 介绍</title>
      <link href="/2022/11/15/02-vue-cli-%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/11/15/02-vue-cli-%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-cli-介绍"><a href="#Vue-cli-介绍" class="headerlink" title="Vue cli 介绍"></a><strong>Vue cli 介绍</strong></h1><p><strong>什么是vue-cli</strong></p><p>vue-cli是由vue官方发布的快速构建vue单页面的脚手架</p><p><strong>为什么要用vue-cli构建项目</strong></p><p> 用vue-cli可以实现webpack的快速打包</p><p>代码重用</p><p>兼容ES6 </p><p>兼容nodeJS </p><h1 id="Vue-cli-环境搭建"><a href="#Vue-cli-环境搭建" class="headerlink" title="Vue cli 环境搭建"></a>Vue cli 环境搭建</h1><ol><li>安装node.js</li></ol><p>​         Node.js 官方网站下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>               </p><ol start="2"><li><p>下载完毕后，可以安装node，建议不要安装在系统盘。</p></li><li><p>设置nodejs prefix（全局）和cache（缓存）路径</p><p>一、在nodejs安装路径下，新建node_global和node_cache两个文件夹</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210824092715825.png" alt="image-20210824092715825"></p><p>二、设置缓存文件夹</p><p>​        npm config set cache “D:\vueProject\nodejs\node_cache”</p><p>三　设置全局模块存放路径</p><p>​      npm config set prefix “D:\vueProject\nodejs\node_global”</p><p>4   基于 Node.js 安装cnpm（淘宝镜像）</p></li></ol><p>​       npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>​    </p><p>   5   设置环境变量（非常重要）</p><p>   说明：设置环境变量可以使得住任意目录下都可以使用cnpm、vue等命令，而不需要输入全路径</p><p>   1、鼠标右键”此电脑”，选择“属性”菜单，在弹出的“系统”对话框中左侧选择“高级系统设置”，弹出“系统属性”对话框。</p><p>   2、修改系统变量PATH</p><p>   <img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210824092919303.png" alt="image-20210824092919303"></p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210824092929861.png" alt="image-20210824092929861"></p><p>新增系统变量NODE_PATH</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210824093002833.png" alt="image-20210824093002833"></p><p>6   安装Vue</p><p>  cnpm install vue -g 或者   npm install vue -g</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210824093035739.png" alt="image-20210824093035739"></p><p>7  安装vue命令行工具，即vue-cli 脚手架</p><p>cnpm install vue-cli -g 或者 npm install vue-cli -g</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210824093104047.png" alt="image-20210824093104047"></p><p>8 搭建完毕</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue cli 介绍 </tag>
            
            <tag> Vue cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2022/10/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/10/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微服务介绍"><a href="#1-微服务介绍" class="headerlink" title="1.微服务介绍"></a>1.微服务介绍</h1><h2 id="1-1-什么是面向服务（SOA）"><a href="#1-1-什么是面向服务（SOA）" class="headerlink" title="1.1 什么是面向服务（SOA）"></a>1.1 什么是面向服务（SOA）</h2><p>　面向服务是一种思想，这种思想相对于之前的面向对象来说比较怪异。</p><p>　面向服务就是将应用程序的不同功能单元（称之为服务）进行拆分，并将这些服务通过接口等联系起来（各服务之间松耦合），想要使用哪个功能，直接进行调用，不会将功能与整个项目紧紧绑定。</p><p>　　 或者这样说：面向服务是一种进行系统开发的新的体系架构，在基于SOA(Service-Oriented Architecture)架构的系统中，具体应用程序的功能是由一些松耦合并且具有统一接口定义方式的组件（也就是Service）组合起来的，它对迅速变化的业务环境具有良好的适应力，一般只有在考虑系统架构的时候才会涉及到面向服务。</p><p><img src="/2.png" alt="2"></p><h2 id="1-2-什么是微服务"><a href="#1-2-什么是微服务" class="headerlink" title="1.2 什么是微服务"></a>1.2 什么是微服务</h2><p>微服务并不是一种技术，而是一种思想，是SOA架构下的产物，只要系统的架构符合这种思想，就可以说它是微服务。最早由马丁福勒提出。将业务拆解成一个个小形态的服务，这些微服务之间是松耦合的，每个微服务都可被独立部署，且都仅关注完成一件任务</p><p>分布式服务组成的系统，主要是为了项目的解耦，将功能分解到离散的各个服务当中，传统的(例如：SSM,SSH )不灵活,构建时间长，任何小修改都要重构整个项目，一个小项目可能导致整个项目挂掉，所以就有了微服务，我们可以把整个系统根据业务拆分成多个子系统，每个子系统可以部署多个应用，多个应用使用负载均衡。</p><p><img src="/3.png" alt="3"></p><p><img src="/1.png" alt="1"></p><h1 id="2-微服务架构需要的功能或使用场景"><a href="#2-微服务架构需要的功能或使用场景" class="headerlink" title="2.微服务架构需要的功能或使用场景"></a>2.微服务架构需要的功能或使用场景</h1><p>　1.把整个项目根据业务拆分成多个子项目。</p><p>　2.每个子项目可以部署多个应用，多个应用之间可以进行负载均衡。</p><p>  3.需要一个服务注册中心（eureka) 所有的服务都在注册中心注册，负载均衡（Ribbon) 也是通过在注册中心注册的服务来使用一定的策略来实现。</p><p>　4.服务之间有时候也需要相互访问，例如有一个用户模块，其他服务在处理一些业务的时候，要获取用户服务的用户数据</p><p>目前主流的微服务框架：Dubbo、 SpringCloud、thrift、Hessian等</p><h1 id="3-微服务架构的优点"><a href="#3-微服务架构的优点" class="headerlink" title="3.微服务架构的优点"></a>3.微服务架构的优点</h1><ol><li>易于开发和维护，一个微服务只关注一个业务，业务清晰，代码量少</li><li>单个微服务代码量少，启动快</li><li>局部修改容易部署</li><li>技术不受限制</li></ol><h1 id="4-springcloud介绍"><a href="#4-springcloud介绍" class="headerlink" title="4.springcloud介绍"></a>4.springcloud介绍</h1><p>　Springcloud严格上说并不是一个框架，而是一个微服务整体架构，或者说springcloud是一个生态圈，里面包含了很多的服务，每一个服务独立存在，相互之间互不干扰，可以直接运行。</p><p>其实springcloud就是一个完整的微服务架构，提供了所有功能，整个开发项目中所需要的架构功能微服务都有，也就是说整个springcloud就是一个完整的项目，这个架构已经搭建完毕了，用到了直接获取即可，只需要往架构中注入自己的业务代码就可以。</p><p>　springcloud是基于springboot 开发的微服务框架，是目前比较完整的微服务解决方案框架，它的内容包括：服务注册（eureka),服务调用（feign) ,负载均衡（Ribbon) ,断路器（Hystrix)等</p><p><img src="/4.png" alt="4"></p><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><ul><li>注册中心：Netflix Eureka；</li><li>负载均衡：Netflix Ribbon（2020 版本前）、Spring Cloud Loadbalancer（2020 版本后）；</li><li>熔断器：Netflix Hystrix（2020 版本前）、Resilience4j（2020 版本后）；</li><li>声明式服务调用组件：Feign（最初属 Netflix 公司，后来移交给 OpenFeign 组织）；</li><li>网关：Netflix Zuul（2020 版本前）、Spring Cloud Gateway（2020 版本后）；</li><li>配置中心：Spring Cloud Config；</li></ul><p>​          </p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务简介 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot基础</title>
      <link href="/2022/09/22/springboot%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/09/22/springboot%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot基础"><a href="#springboot基础" class="headerlink" title="springboot基础"></a>springboot基础</h1><h2 id="1-springboot介绍"><a href="#1-springboot介绍" class="headerlink" title="1.springboot介绍"></a>1.springboot介绍</h2><p> Spring Boot是由spring的Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架。</p><p>平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？</p><p>1）配置web.xml，加载spring和spring mvc</p><p>2）配置数据库连接、配置spring事务</p><p>3）配置加载配置文件的读取，开启注解</p><p>4）配置日志文件</p><p>…</p><p>配置完成之后部署tomcat 调试</p><p>…</p><p>但是如果使用spring boot呢？</p><p>很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目或者是构建一个微服务</p><p>Spring Boot 具有以下特点：</p><p><strong>1 内嵌 Servlet 容器</strong></p><p>   Spring Boot 使用嵌入式的 Servlet 容器（例如 Tomcat、Jetty 或者 Undertow 等），应用无需打成 WAR 包 。</p><p><strong>2 提供 starter 简化 Maven 配置</strong></p><p>   Spring Boot 提供了一系列的“starter”项目对象模型（POMS）来简化 Maven 配置。</p><p><strong>3 提供了大量的自动配置</strong></p><p>   Spring Boot 提供了大量的默认自动配置，来简化项目的开发，开发人员也通过配置文件修改默认配置。</p><p><strong>4 自带应用监控</strong></p><p>   Spring Boot 可以对正在运行的项目提供监控。</p><p><strong>5 无代码生成和 xml 配置</strong></p><p>   Spring Boot 不需要任何 xml 配置即可实现 Spring 的所有配置</p><h2 id="2-spring-boot项目创建"><a href="#2-spring-boot项目创建" class="headerlink" title="2.spring boot项目创建"></a>2.spring boot项目创建</h2><p>搭建一个springboot 项目步骤如下：</p><h3 id="2-1-新建maven项目"><a href="#2-1-新建maven项目" class="headerlink" title="2.1  新建maven项目"></a>2.1  新建maven项目</h3><p>通过idea创建新项目（<a href="https://start.spring.io/%EF%BC%89">https://start.spring.io/）</a></p><h3 id="2-2-启动程序"><a href="#2-2-启动程序" class="headerlink" title="2.2 启动程序"></a>2.2 启动程序</h3><p>程序启动后，结果如下图说明启动成功</p><h2 id="3-pom文件配置"><a href="#3-pom文件配置" class="headerlink" title="3.pom文件配置"></a>3.pom文件配置</h2><h3 id="3-1-properties"><a href="#3-1-properties" class="headerlink" title="3.1 properties"></a>3.1 properties</h3><p>可以做自定义配置，比如配置maven编译时指定的字符集：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定maven编译时指定的jdk版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以在build标签中配置，效果等同于以上配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以自定义依赖包的版本号标签，在添加依赖包时使用版本号标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-springboot配置文件"><a href="#4-springboot配置文件" class="headerlink" title="4.springboot配置文件"></a>4.springboot配置文件</h2><p>Spring Boot 提供了大量的自动配置，极大地简化了spring 应用的开发过程，当用户创建了一个 Spring Boot 项目后，即使不进行任何配置，该项目也能顺利的运行起来。当然，用户也可以根据自身的需要使用配置文件修改 Spring Boot 的默认设置。</p><p>SpringBoot 默认使用以下 2 种全局的配置文件，其文件名是固定的。</p><ul><li>application.properties</li><li>application.yml</li></ul><p>其中，application.yml 是一种使用 YAML 语言编写的文件，它与 application.properties 一样，可以在 Spring Boot 启动时被自动读取，修改 Spring Boot 自动配置的默认值。</p><p>.properties 文件我们都熟知了，这里主要介绍下.yml 文件的语法以及使用</p><h3 id="4-1-YAML配置"><a href="#4-1-YAML配置" class="headerlink" title="4.1 YAML配置"></a>4.1 YAML配置</h3><p><strong>YAML 简介</strong></p><p>YAML 全称 YAML Ain’t Markup Language，它是一种以数据为中心的标记语言，比 XML 和 JSON 更适合作为配置文件。</p><p>想要使用 YAML 作为属性配置文件（以 .yml 结尾）</p><p>下面是一个简单的 application.yml 属性配置文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p><strong>YAML 语法</strong></p><p>YAML 的语法如下：</p><ul><li>使用缩进表示层级关系。</li><li>缩进时不允许使用 Tab 键，只允许使用空格。</li><li>缩进的空格数不重要，但同级元素必须左侧对齐，一般缩进两个空格。</li><li>大小写敏感。</li></ul><h3 id="4-2-多环境YAML配置"><a href="#4-2-多环境YAML配置" class="headerlink" title="4.2 多环境YAML配置"></a>4.2 多环境YAML配置</h3><p>在resources目录下创建application-dev.yml和application-prod.yml文件，分别表示开发环境和生产环境。文件名的前缀需要以appliaction-开头。</p><p>在application-dev.yml中配置端口号：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>在application-prod.yml中配置端口号：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><p>在application.yml中指定哪个配置文件生效：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>此时指定为dev环境，即开发环境生效。如需要使用生产环境的配置，则将spring.profiles.active指定为prod即可</p><p>也可以通过获取pom文件中的配置项来指定多环境配置文件：</p><p>在pom.xml文件中添加profiles：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--默认为dev环境打包方式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在profile中指定dev环境为默认生效的环境配置。</p><p>在application.yml文件中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profileActive@</span></span><br></pre></td></tr></table></figure><p>通过profileActive动态获取生效的配置环境。</p><h2 id="5-springboot启动注解"><a href="#5-springboot启动注解" class="headerlink" title="5.springboot启动注解"></a>5.springboot启动注解</h2><h3 id="5-1-SpringBootApplication-注解"><a href="#5-1-SpringBootApplication-注解" class="headerlink" title="5.1 SpringBootApplication 注解"></a>5.1 SpringBootApplication 注解</h3><p>@SpringBootApplication是一个复合注解，包括元注解和@ComponentScan，和@SpringBootConfiguration，@EnableAutoConfiguration。</p><p><strong>元注解</strong></p><p>@Target、@Retention、@Documented、@Inherited</p><p><strong>@Target</strong>：用于设定注解范围，即注解可以用在什么地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Retention</strong>：定义了被它注解了的注解可以保留多久，我们点击它的枚举类型看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；被编译器忽略</span><br><span class="line"></span><br><span class="line">class：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期</span><br><span class="line"></span><br><span class="line">runtime：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在</span><br><span class="line"></span><br><span class="line">生命周期：runtime&gt;class&gt;source</span><br></pre></td></tr></table></figure><p><strong>@Documented</strong>：表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中，是一个标记注解，没有成员。<br><strong>@Inherited</strong>：如果一个类用上了@Inherited修饰的注解，那么其子类也会继承这个注解。</p><p><strong>@SpringBootConfiguration</strong>：SpringBootConfiguration与Spring中的@Configuation的作用基本一致，只不过@SpringBootConfiguration是springboot的注解，而@Configuration是spring的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>@Configuration等价于<code>&lt;Beans&gt;&lt;/Beans&gt;</code></p><p>@Indexed是Spring 5.0版本新加入的功能，在很多应用中，随着应用变得越来越大，就会出现启动变得非常慢的问题，可以通过@Indexed来提高启动效率。它可以为Spring的<strong>模式注解</strong>添加索引，以提升应用启动性能。</p><p><strong>模式注解</strong>：</p><table><thead><tr><th>Spring注解</th><th>场景说明</th></tr></thead><tbody><tr><td>@Repository</td><td>数据仓库模式注解</td></tr><tr><td>@Component</td><td>通用组件模式注解</td></tr><tr><td>@Service</td><td>服务模式注解</td></tr><tr><td>@Controller</td><td>Web控制器模式注解</td></tr><tr><td>@Configuration</td><td>配置类模式注解</td></tr></tbody></table><p>添加依赖：spring5.0版本以下不支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目编译打包时，会在自动生成META-INF&#x2F;spring.components文件，文件包含被@Indexed注释的类的模式解析结果。当Spring应用上下文进行组件扫描时，META-INF&#x2F;spring.components会被org.springframework.context.index.CandidateComponentsIndexLoader读取并加载，转换为CandidateComponentsIndex对象，此时组件扫描会读取CandidateComponentsIndex，而不进行实际扫描，从而提高组件扫描效率，减少应用启动时间。</p><p><strong>@EnableAutoConfiguration</strong>：自动扫描装配，扫描加载项目以外的bean，即pom文件中依赖的jar中的bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>@AutoConfigurationPackage</strong>：自动扫描包，打开看具体注解内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@Import(&#123;Registrar.class&#125;)</span><br><span class="line">public @interface AutoConfigurationPackage &#123;</span><br><span class="line">    String[] basePackages() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Import</strong>：用于导入配置类或者一些需要前置加载的类，你就当作Import 包.类</p><p><strong>Registrar</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Registrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;</span><br><span class="line">        Registrar() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">            AutoConfigurationPackages.register(registry, (String[])(<span class="keyword">new</span> <span class="title class_">AutoConfigurationPackages</span>.PackageImports(metadata)).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> <span class="title class_">AutoConfigurationPackages</span>.PackageImports(metadata));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在registerBeanDefinitions方法中，register(register,新建一个PackageImports匿名对象，将metadata这个对象形参填入，然后使用getPackageNames方法填入数组)</p><p>其实这就是扫描主配置类同级目录以及子包，然后记录下来，并将相应的组件导入到springboot创建管理的容器中。</p><p><strong>AutoConfigurationImportSelector</strong>：该方法的含义是扫描所有类路径下的META-INF&#x2F;spring.factories文件.映射为一个map.取出EnableAutoConfiguration对应的数据以及其他的bean存在容器中。</p><p>spring.factories在spring-boot依赖包中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">        List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader()));</span><br><span class="line">        ImportCandidates.load(AutoConfiguration.class, <span class="built_in">this</span>.getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>@ComponentScan</strong>：用于类或接口上主要是指定扫描路径，spring会把指定路径下带有指定注解的类注册到IOC容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(ComponentScans.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanNameGenerator</span>&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">ScopeMetadataResolver</span>&gt; scopeResolver() <span class="keyword">default</span> AnnotationScopeMetadataResolver.class;</span><br><span class="line"></span><br><span class="line">    ScopedProxyMode <span class="title function_">scopedProxy</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">resourcePattern</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;**/*.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">useDefaultFilters</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    ComponentScan.Filter[] includeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    ComponentScan.Filter[] excludeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">lazyInit</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(&#123;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Filter &#123;</span><br><span class="line">        FilterType <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> FilterType.ANNOTATION;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AliasFor(&quot;classes&quot;)</span></span><br><span class="line">        Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">        Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        String[] pattern() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>basePackages、value：指定扫描路径，如果为空则以@ComponentScan注解的类所在的包为基本的扫描路径。</p><p>由于@ComponentScan注解只能扫描spring-boot项目包内的bean并注册到spring容器中，因此需要@EnableAutoConfiguration，注解来注册项目包外的bean。而spring.factories文件，则是用来记录项目包外需要注册的bean类名。</p>]]></content>
      
      
      <categories>
          
          <category> springbootboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> springboot基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合日志</title>
      <link href="/2022/09/22/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97/"/>
      <url>/2022/09/22/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合日志"><a href="#springboot整合日志" class="headerlink" title="springboot整合日志"></a>springboot整合日志</h1><h2 id="1-日志框架的选择"><a href="#1-日志框架的选择" class="headerlink" title="1.日志框架的选择"></a>1.日志框架的选择</h2><p>市面上常见的日志框架有很多，它们可以被分为两类：日志门面（日志抽象层）和日志实现，如下表。</p><table><thead><tr><th>日志分类</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>日志门面（日志抽象层）</td><td>为 Java 日志访问提供一套标准和规范的 API 框架，其主要意义在于提供接口。</td><td>JCL（Jakarta Commons Logging）、SLF4j（Simple Logging Facade for Java）、jboss-logging</td></tr><tr><td>日志实现</td><td>日志门面的具体的实现</td><td>Log4j、JUL（java.util.logging）、Log4j2、Logback</td></tr></tbody></table><p>​     通常情况下，日志由一个日志门面与一个日志实现组合搭建而成，Spring Boot 选用 SLF4J + Logback 的组合来搭建日志系统。</p><p>​     SLF4J 是目前市面上最流行的日志门面，使用 Slf4j 可以很灵活的使用占位符进行参数占位，简化代码，拥有更好的可读性。</p><p>​     Logback 是 Slf4j 的原生实现框架，它与 Log4j 出自一个人之手，但拥有比 log4j 更多的优点、特性和更做强的性能，现在基本都用来代替 log4j 成为主流</p><h2 id="2-logback日志配置"><a href="#2-logback日志配置" class="headerlink" title="2.logback日志配置"></a>2.logback日志配置</h2><h3 id="2-1-springboot配置"><a href="#2-1-springboot配置" class="headerlink" title="2.1 springboot配置"></a>2.1 springboot配置</h3><p>在application-*.yml文件中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:/logs/springboot</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:config/logback-spring.xml</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>logging.file.path：日志存放路径</p><p>logging.config：读取logback日志文件配置，logback-spring.xml文件名尽量固定</p><p>logging.level：日志级别</p><h3 id="2-2-logback-spring-xml配置"><a href="#2-2-logback-spring-xml配置" class="headerlink" title="2.2 logback-spring.xml配置"></a>2.2 logback-spring.xml配置</h3><p>在项目的resources目录下创建config文件夹，在该文件夹下创建logback-spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取logging.path中的路径来生成日志文件，logging.file.path从appliaction-*.yml中获取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logPath&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.file.path&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">defaultValue</span>=<span class="string">&quot;/logs/springboot&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;logPath&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 变量引用格式：$&#123;变量名:-默认值&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/debug/log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">        addtivity:是否向上级logger传递打印信息。默认是true。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         1、使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">         2、第一种把&lt;root level=&quot;info&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">         3、第二种就是单独给dao下目录配置debug模式，这样配置sql语句会打印，其他还是正常info级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.hqyj&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.hqyj&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>根节点 <code>&lt;configuration&gt;</code> 的子节点</strong></p><h4 id="2-2-1-logger"><a href="#2-2-1-logger" class="headerlink" title="2.2.1 logger"></a>2.2.1 logger</h4><p>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定 <code>&lt;appender&gt;</code>。<code>&lt;logger&gt;</code> 仅有一个name属性，一个可选的level和一个可选的addtivity属性。</p><ul><li><code>name</code> 用来指定受此 <code>loger</code> 约束的某一个包或者具体的某一个类</li><li><code>level</code> 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值 <strong>INHERITED</strong> 或者同义词 <strong>NULL</strong> ，代表强制执行上级的级别。如果未设置此属性，那么当前 <code>logger</code> 将会继承上级的日志级别。</li><li><code>addtivity</code> 是否向上级 <code>logger</code> 传递打印信息。默认是true。</li><li>appender-ref用来指定appender。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.hqyj&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-appender"><a href="#2-2-2-appender" class="headerlink" title="2.2.2 appender"></a>2.2.2 appender</h4><p>是 <code>&lt;configuration&gt;</code> 的子节点，是负责写日志的组件。该标签负责以适当的格式将日志记录事件输出到适当的输出设备。</p><ul><li><code>name</code> 指定appender名称</li><li><code>class</code> 指定appender的全限定名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用的appender类型：ConsoleAppender、RollingFileAppender</p><p>ConsoleAppender：用于把日志输出到控制台。</p><p>RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。</p><p><strong>appender的子标签：</strong></p><ul><li><p><code>encoder</code> 对日志进行格式化</p></li><li><p><code>rollingPolicy</code> 当发生滚动时，决定<strong>RollingFileAppender</strong> 的行为，涉及文件移动和重命名(设置滚动策略)</p><p><code>class</code> ：为 <code>rollingPolicy</code> 的属性，设置 日志的滚动策略，最常用的滚动策略为<strong>TimeBasedRollingPolicy</strong> ：它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</p><p><code>rollingPolicy</code> 的 子节点：</p><p><fileNamePattern> : 为一个必要的子节点，设置日志文件的名称 。一般包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。</p><p><code>&lt;maxHistory&gt;</code> : 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。</p><p><code>filter</code> :为日志过滤器。执行一个过滤器会有返回一个枚举值，即 <strong>DENY</strong>，<strong>NEUTRAL</strong>，<strong>ACCEPT</strong> 其中之一。</p><p><code>class</code> ：为 <code>filter</code> 设置指定的过滤器 ，下面列举几个常见的 过滤器</p><p><strong>LevelFilter</strong> ：级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。</p><p>onMatch&#x3D;”ACCEPT” 表示匹配该级别及以上</p><p>onMatch&#x3D;”DENY” 表示不匹配该级别及以上</p><p>onMatch&#x3D;”NEUTRAL” 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上</p><p>onMismatch&#x3D;”ACCEPT” 表示匹配该级别以下</p><p>onMismatch&#x3D;”DENY” 表示不匹配该级别以下的</p><p>onMismatch&#x3D;”NEUTRAL” 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的</p></li></ul><h4 id="2-2-3-root"><a href="#2-2-3-root" class="headerlink" title="2.2.3 root"></a>2.2.3 root</h4><p><code>root</code> 为根元素，只有一个level属性。<code>&lt;root&gt;</code> 可以包含零个或多个 <code>&lt;appender-ref&gt;</code> 元素。</p><ul><li><code>level</code> 设置日志级别。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-log的pattern转换符"><a href="#2-2-4-log的pattern转换符" class="headerlink" title="2.2.4 log的pattern转换符"></a>2.2.4 log的pattern转换符</h4><p>log.pattern中转换符说明：</p><p><strong>c</strong> {<em>length</em> }<br><strong>lo</strong> {<em>length</em> }<br><strong>logger</strong> {<em>length</em> }</p><p>输出日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串。</p><table><thead><tr><th>Conversion specifier</th><th>Logger name</th><th>Result</th></tr></thead><tbody><tr><td>%logger</td><td>mainPackage.sub.sample.Bar</td><td>mainPackage.sub.sample.Bar</td></tr><tr><td>%logger{0}</td><td>mainPackage.sub.sample.Bar</td><td>Bar</td></tr><tr><td>%logger{5}</td><td>mainPackage.sub.sample.Bar</td><td>m.s.s.Bar</td></tr><tr><td>%logger{10}</td><td>mainPackage.sub.sample.Bar</td><td>m.s.s.Bar</td></tr><tr><td>%logger{15}</td><td>mainPackage.sub.sample.Bar</td><td>m.s.sample.Bar</td></tr><tr><td>%logger{16}</td><td>mainPackage.sub.sample.Bar</td><td>m.sub.sample.Bar</td></tr><tr><td>%logger{26}</td><td>mainPackage.sub.sample.Bar</td><td>mainPackage.sub.sample.Bar</td></tr></tbody></table><p><strong>d</strong> {<em>pattern</em> }<br><strong>date</strong> {<em>pattern</em> }</p><p>输出日志的打印日志，模式语法与<code>java.text.SimpleDateFormat</code> 兼容。  </p><table><thead><tr><th>Conversion Pattern</th><th>Result</th></tr></thead><tbody><tr><td>%d</td><td>2006-10-20 14:06:49,812</td></tr><tr><td>%date</td><td>2006-10-20 14:06:49,812</td></tr><tr><td>%date{ISO8601}</td><td>2006-10-20 14:06:49,812</td></tr><tr><td>%date{HH:mm:ss.SSS}</td><td>14:06:49.812</td></tr><tr><td>%date{dd MMM yyyy ;HH:mm:ss.SSS}</td><td>20 oct. 2006;14:06:49.812</td></tr></tbody></table><p><strong>m &#x2F; msg &#x2F; message</strong></p><p>输出应用程序提供的信息。</p><p><strong>n</strong></p><p>输出平台相关的分行符“\n”或者“\r\n”。</p><p><strong>p &#x2F; le &#x2F; level</strong></p><p>输出日志级别。</p><p><strong>t &#x2F; thread</strong></p><p>输出产生日志的线程名。</p><p><strong>logback中变量引用</strong>：</p><p>在引用一个变量时，如果该变量未定义，需要为其指定默认值，写法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;变量名:-默认值&#125;</span><br></pre></td></tr></table></figure><p><strong>格式修饰符：</strong></p><p>与转换符共同使用<strong>，</strong>可选的格式修饰符位于“%”和转换符之间。</p><p><strong>左对齐修饰符</strong> ：符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。</p><p>如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。</p><p><strong>最大宽度修饰符</strong>：符号是点号”.”后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。</p><table><thead><tr><th>Format modifier</th><th>Logger name</th><th>Result</th></tr></thead><tbody><tr><td>[%20.20logger]</td><td>main.Name</td><td>[  main.Name]</td></tr><tr><td>[%-20.20logger]</td><td>main.Name</td><td>[main.Name  ]</td></tr><tr><td>[%10.10logger]</td><td>main.foo.foo.bar.Name</td><td>[o.bar.Name]</td></tr><tr><td>[%10.-10logger]</td><td>main.foo.foo.bar.Name</td><td>[main.foo.f]</td></tr></tbody></table><p><strong>支持的颜色字符编码</strong></p><ul><li>black 黑色</li><li>red 红色</li><li>green 绿色</li><li>yellow 黄色</li><li>blue 蓝色</li><li>magenta 洋红色</li><li>cyan 青色</li><li>white 白色</li><li>gray 灰色</li></ul><p>更多颜色可参考：<a href="https://logback.qos.ch/manual/layouts.html#coloring">https://logback.qos.ch/manual/layouts.html#coloring</a></p><h2 id="3-slf4j应用"><a href="#3-slf4j应用" class="headerlink" title="3.slf4j应用"></a>3.slf4j应用</h2><p>pom.xml文件中默认已引入slf4j相关jar包的依赖，直接使用即可。</p><p>方式一：</p><p>在类中通过LoggerFactory定义Logger对象后即可使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDem01Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;SpringbootDem01Application&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootDem01Application.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;******舞台已搭建，请开始你的表演******&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><p>在pom.xml文件中引入Lombok依赖，使用该依赖包提供的注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在类中使用@Slf4j注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDem01Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootDem01Application.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;******舞台已搭建，请开始你的表演******&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springbootboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志、整合 </tag>
            
            <tag> springboot整合日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybits第二天笔记</title>
      <link href="/2022/09/22/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/mybits%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/09/22/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/mybits%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>在之前所进行的查询之中可以发现 FROM 子句之中只会存在有一张数据表，所以之前都只是针对于单表查询操作， 而所谓的多表查询指的是同时从多张数据表之中取出数据实现的查询，重点修改的是 FROM 子句</p><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--当属性名和字段名不一致的时候需要配置，如果属性名和字段名保持一致则不需要配置resultMap--&gt;</span><br><span class="line">    &lt;resultMap <span class="built_in">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span> column=<span class="string">&quot;id&quot;</span> property=<span class="string">&quot;id&quot;</span>&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;user_name&quot;</span> property=<span class="string">&quot;userName&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;user_age&quot;</span> property=<span class="string">&quot;userAge&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;user_sex&quot;</span> property=<span class="string">&quot;userSex&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;user_tel&quot;</span> property=<span class="string">&quot;userTel&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;user_pwd&quot;</span> property=<span class="string">&quot;userPwd&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--配置一对一的级联操作--&gt;</span><br><span class="line">        &lt;!--property:次类属性，javaType：该属性所对应的类型--&gt;</span><br><span class="line">        &lt;association property=<span class="string">&quot;idCard&quot;</span> javaType=<span class="string">&quot;IdCard&quot;</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">id</span> column=<span class="string">&quot;id&quot;</span> property=<span class="string">&quot;id&quot;</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;card_name&quot;</span> property=<span class="string">&quot;cardName&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;card_address&quot;</span> property=<span class="string">&quot;cardAddress&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;card_num&quot;</span> property=<span class="string">&quot;cardNum&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;findUser2&quot; type=&quot;User&quot;&gt;</span><br><span class="line">       &lt;id column=&quot;user_id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">       &lt;result column=&quot;user_name&quot; property=&quot;userName&quot;&gt;&lt;/result&gt;</span><br><span class="line">       &lt;result column=&quot;user_age&quot; property=&quot;userAge&quot;&gt;&lt;/result&gt;</span><br><span class="line">       &lt;result column=&quot;user_sex&quot; property=&quot;userSex&quot;&gt;&lt;/result&gt;</span><br><span class="line">       &lt;result column=&quot;user_tel&quot; property=&quot;userTel&quot;&gt;&lt;/result&gt;</span><br><span class="line">       &lt;result column=&quot;user_pwd&quot; property=&quot;userPwd&quot;&gt;&lt;/result&gt;</span><br><span class="line">       &lt;!--配置一对多的级联操作--&gt;</span><br><span class="line">       &lt;!--property:次类属性，ofType：该属性所对应的类型--&gt;</span><br><span class="line">       &lt;collection property=&quot;orders&quot; ofType=&quot;Order&quot;&gt;</span><br><span class="line">           &lt;!--column：sql语句执行完成后的字段名--&gt;</span><br><span class="line">           &lt;id column=&quot;order_id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">           &lt;result column=&quot;order_name&quot; property=&quot;orderName&quot;&gt;&lt;/result&gt;</span><br><span class="line">           &lt;result column=&quot;order_price&quot; property=&quot;orderPrice&quot;&gt;&lt;/result&gt;</span><br><span class="line">           &lt;result column=&quot;order_time&quot; property=&quot;orderTime&quot;&gt;&lt;/result&gt;</span><br><span class="line">       &lt;/collection&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;findUser1&quot; type=&quot;User&quot;&gt;</span><br><span class="line">       &lt;result column=&quot;user_name&quot; property=&quot;userName&quot;&gt;&lt;/result&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line">   &lt;!--User queryUserById(Integer id);--&gt;</span><br><span class="line">   &lt;!--接口方式访问，id值为对应接口中的方法名--&gt;</span><br><span class="line">   &lt;!--resultType=&quot;com.hqyj.gyq.entity.User&quot; 当表中的字段名和实体类的属性名相同则可以自动映射上，如果不同就不适用，使用resultMap--&gt;</span><br><span class="line">   &lt;select id=&quot;selectUserById&quot;  resultMap=&quot;findUser&quot;&gt;</span><br><span class="line">       select * from user where user_id = #&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">   &lt;select id=&quot;selectUserById1&quot;  resultMap=&quot;findUser&quot;&gt;</span><br><span class="line">       select * from user u,idCard i where u.user_id = #&#123;id&#125; and i.id = u.card_id</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--如果是多表联查，注意：表中的字段名相同了，最好建表时候进行区分，或者在sql语句中取别名区分--&gt;</span><br><span class="line">   &lt;select id=&quot;selectUserById2&quot;   resultMap=&quot;findUser2&quot;&gt;</span><br><span class="line">           SELECT*,o.id order_id FROM user u,t_order o  where u.user_id = #&#123;id&#125; and u.user_id=o.user_id</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多表查询首先要分清楚主次关系。我们首先要查询什么然后在次查询里编写我们的sql语句进行联表查询。</p>]]></content>
      
      
      <categories>
          
          <category> mybits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> mybits总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2022/09/22/hello-world/"/>
      <url>/2022/09/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到<a href="https://supertai.xyz/">我的博客</a>! 路漫漫其修远兮，吾将上下而求索！从大数据转到前端对我来说还是难度很大。这是我第一次做一个完整的博客，希望大家可以多多的留言哦~  谢谢大家啦~ 啾咪~</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybits第一天笔记</title>
      <link href="/2022/09/22/mybits/"/>
      <url>/2022/09/22/mybits/</url>
      
        <content type="html"><![CDATA[<h2 id="1、通过命名空间访问（了解）"><a href="#1、通过命名空间访问（了解）" class="headerlink" title="1、通过命名空间访问（了解）"></a>1、通过命名空间访问（了解）</h2><p>1、创建动态web工程<br>2、导入相关的jar包（commons-logging-1.2.jar、log4j-1.2.17.jar、mybatis-3.4.2.jar、mysql-connector-java-5.1.21.jar）<br>3、在src下面创建mybatis的核心配置文件mybatis-config.xml(文档):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">//配置连接数据库的四大基本参数（db.properties）</span><br><span class="line">    &lt;properties resource=<span class="string">&quot;db.properties&quot;</span>&gt;&lt;/properties&gt;</span><br><span class="line">    //环境配置</span><br><span class="line">    &lt;environments default=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment <span class="built_in">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        //事务管理</span><br><span class="line">            &lt;transactionManager <span class="built_in">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            //连接数据库（mybatis默认的连接池）</span><br><span class="line">            &lt;dataSource <span class="built_in">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;jdbc.driverClassName&#125;</span>&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;jdbc.url&#125;</span>&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;jdbc.username&#125;</span>&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;jdbc.password&#125;</span>&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">&lt;!--        &lt;environment <span class="built_in">id</span>=<span class="string">&quot;test&quot;</span>&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;transactionManager <span class="built_in">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;dataSource <span class="built_in">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;--&gt;</span><br><span class="line">&lt;!--                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;driver&#125;</span>&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;url&#125;</span>&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;username&#125;</span>&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;<span class="variable">$&#123;password&#125;</span>&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;/dataSource&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/environment&gt;--&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    //加载对应的mapper映射文件</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">&quot;com\hqyj\gyq\entity\UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="1-db-properties部分"><a href="#1-db-properties部分" class="headerlink" title="1.db.properties部分"></a>1.db.properties部分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">    jdbc.url=jdbc:mysql://127.0.0.1:3306/j220701</span><br><span class="line">    jdbc.username=root</span><br><span class="line">    jdbc.password=123456</span><br></pre></td></tr></table></figure><h3 id="2-创建dao包以及对应的实现类的包："><a href="#2-创建dao包以及对应的实现类的包：" class="headerlink" title="2.创建dao包以及对应的实现类的包："></a>2.创建dao包以及对应的实现类的包：</h3><h3 id="3-在dao包中编写接口UserDao"><a href="#3-在dao包中编写接口UserDao" class="headerlink" title="3.在dao包中编写接口UserDao"></a>3.在dao包中编写接口UserDao</h3><h3 id="4-编写对应的实现类"><a href="#4-编写对应的实现类" class="headerlink" title="4.编写对应的实现类"></a>4.编写对应的实现类</h3><h3 id="5-编写对应的映射文件（UserMapper-xml—-gt-实体类-Mapper-xml）"><a href="#5-编写对应的映射文件（UserMapper-xml—-gt-实体类-Mapper-xml）" class="headerlink" title="5.编写对应的映射文件（UserMapper.xml—-&gt;实体类+Mapper.xml）:"></a>5.编写对应的映射文件（UserMapper.xml—-&gt;实体类+Mapper.xml）:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--命名空间值，一般来说写对应接口的完全限定名--&gt;</span><br><span class="line">    &lt;mapper namespace=<span class="string">&quot;com.hqyj.gyq.dao.UserDao&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--当属性名和字段名不一致的时候需要配置，如果属性名和字段名保持一致则不需要配置resultMap--&gt;</span><br><span class="line">        &lt;resultMap <span class="built_in">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;com.hqyj.gyq.entity.User&quot;</span>&gt;</span><br><span class="line">            &lt;<span class="built_in">id</span> column=<span class="string">&quot;id&quot;</span> property=<span class="string">&quot;id&quot;</span>&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;user_name&quot;</span> property=<span class="string">&quot;userName&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;user_age&quot;</span> property=<span class="string">&quot;userAge&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;user_sex&quot;</span> property=<span class="string">&quot;userSex&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;user_tel&quot;</span> property=<span class="string">&quot;userTel&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;user_pwd&quot;</span> property=<span class="string">&quot;userPwd&quot;</span>&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/resultMap&gt;</span><br><span class="line">        &lt;!--<span class="built_in">id</span>值唯一，用来做精确定位的（找到该命名空间下的哪一个sql语句）--&gt;</span><br><span class="line">        &lt;select <span class="built_in">id</span>=<span class="string">&quot;selectUserById&quot;</span> resultMap=<span class="string">&quot;findUser&quot;</span>&gt;</span><br><span class="line">            select * from user <span class="built_in">where</span> <span class="built_in">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">    &lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="2、编写测试类-通过接口方式访问（掌握）"><a href="#2、编写测试类-通过接口方式访问（掌握）" class="headerlink" title="2、编写测试类  通过接口方式访问（掌握）"></a>2、编写测试类  通过接口方式访问（掌握）</h2><p>1-3同上</p><h3 id="1-创建mapper包，编写UserMapper接口"><a href="#1-创建mapper包，编写UserMapper接口" class="headerlink" title="1.创建mapper包，编写UserMapper接口"></a>1.创建mapper包，编写UserMapper接口</h3><h3 id="2-在对应映射文件里面编写sql语句，注意（id值一定与接口的方法名保持一致）"><a href="#2-在对应映射文件里面编写sql语句，注意（id值一定与接口的方法名保持一致）" class="headerlink" title="2.在对应映射文件里面编写sql语句，注意（id值一定与接口的方法名保持一致）"></a>2.在对应映射文件里面编写sql语句，注意（id值一定与接口的方法名保持一致）</h3><h3 id="3-编写测试类，使用session-getMapper-获取对应的对象—–》原理：使用动态代理模式创建了对应mapper接口的实现类"><a href="#3-编写测试类，使用session-getMapper-获取对应的对象—–》原理：使用动态代理模式创建了对应mapper接口的实现类" class="headerlink" title="3.编写测试类，使用session.getMapper()获取对应的对象—–》原理：使用动态代理模式创建了对应mapper接口的实现类"></a>3.编写测试类，使用session.getMapper()获取对应的对象—–》原理：使用动态代理模式创建了对应mapper接口的实现类</h3>]]></content>
      
      
      <categories>
          
          <category> mybits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> mybits总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/08/25/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/25/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
